// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_RAY_RECURSIVE_DEPTH 6
#define AA_SAMPLES				16

#include "Types.cginc"
#include "Utility.cginc"
#include "Ray.cginc"
#include "Material.cginc"
#include "Sphere.cginc"
#include "SimpleAS.cginc"
#include "Camera.cginc"


StructuredBuffer<SphereData> SimpleAccelerationStructureData;
RWTexture2D<float4> Result;
float _SkyBoxFactor;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
//static const float PI = 3.14159265f;

float4 TargetSize;

float3 Ray_Color(Ray r, SimpleAccelerationStructure sas, float2 uv)
{
	Sphere Sph;
	HitRecord Rec = _HitRecord();
	Ray R = r;
	float3 Factor = float3(1, 1, 1);
	Ray Scattered = _Ray(float3(0, 0, 0), float3(0, 0, 0));
	float3 Attenuation = float3(0, 0, 0);

	for (int i = 0; i < MAX_RAY_RECURSIVE_DEPTH; i++)
	{
		if (SimpleAccelerationStructure_Hit(sas, R, MINT, INFINITY, Rec))
		{
			float Offset = ((float)i) / (float)(MAX_RAY_RECURSIVE_DEPTH * 2);

			if (Material_Scatter(Rec.Material, R, Rec, Attenuation, Scattered, float3(uv, Offset)))
			{
				R = Scattered;
				Factor *= Attenuation;
			}
			else
			{
				//float theta = acos(r.Dir.y) / -3.14159265f;
				//float phi = atan2(r.Dir.x, -r.Dir.z) / -3.14159265f * 0.5f;
				//return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * _SkyBoxFactor;
				return float3(0, 0, 0);
			}
		}
		else
		{
		
			float theta = acos(r.Dir.y) / -3.14159265f;
			float phi = atan2(r.Dir.x, -r.Dir.z) / -3.14159265f * 0.5f;
			return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * _SkyBoxFactor;

			//float3 UnitDir = normalize(R.Dir);
			//float t = 0.5 * (UnitDir.y + 1.0f);
			//return lerp(BKG_COLOR0, BKG_COLOR1, t) * Factor;
		}
	}
	//float theta = acos(r.Dir.y) / -3.14159265f;
	//float phi = atan2(r.Dir.x, -r.Dir.z) / -3.14159265f * 0.5f;
	//return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * _SkyBoxFactor;
	return float3(0, 0, 0);
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float2 ViewportSize = float2(2.0, 2.0);
	float FocalLength = 1.0f;

	float3 Origin = float3(0, 0, 0);
	float3 Horizontal = float3(ViewportSize.x, 0, 0);
	float3 Vertical = float3(0, ViewportSize.y, 0);
	float3 LowerLeftCorner = Origin - (Horizontal / 2.0) - (Vertical / 2.0) - float3(0, 0, FocalLength);
	
	SimpleAccelerationStructure SAS = _SimpleAccelerationStructure(int(TargetSize.w), SimpleAccelerationStructureData);
	
	float3 LookFrom = float3(13, 2, 3);
	float3 LookAt = float3(0, 0, 0);
	float3 VUp = float3(0, 1, 0);
	float Dist2Focus = 10.0;
	float Aperture = 0.2;
	Camera Cam = _Camera(LookFrom, LookAt, VUp, 25, TargetSize.x / TargetSize.y, Aperture, Dist2Focus);

	float3 Color = float3(0, 0, 0);
	

	for (int s = 0; s < AA_SAMPLES; s++)
	{
		float2 Seed = float2(id.xy) / TargetSize.xy;
		float Offset = float(s) / float(AA_SAMPLES);

		float2 Jitter = float2(Random(Seed), Random(Seed + Offset));
		float2 UV = (float2(id.xy) + Jitter) / TargetSize.xy;

		
		

	    Ray R = Camera_GetRay(Cam, UV);		
		Color += Ray_Color(R, SAS, UV);
	}
	Color /= float(AA_SAMPLES);
	Color = clamp(Color, 0, 1);
	Color = pow(Color, 1.0/1.8);
	
	Result[id.xy] = float4(Color, 1);

	//Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
}

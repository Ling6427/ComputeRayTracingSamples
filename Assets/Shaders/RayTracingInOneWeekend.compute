// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_RAY_RECURSIVE_DEPTH 6
#define AA_SAMPLES				64

#include "Types.cginc"
#include "Utility.cginc"
#include "Ray.cginc"
#include "Material.cginc"
#include "Sphere.cginc"
#include "SimpleAS.cginc"
#include "Camera.cginc"


struct MeshObject
{
	float4x4 localToWorldMatrix;
	int indices_offset;
	int indices_count;
};

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
	float smoothness;
	float3 emission;
};
StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;


static const float EPSILON = 1e-8;
StructuredBuffer<SphereData> SimpleAccelerationStructureData;
RWTexture2D<float4> Result;
float _SkyBoxFactor;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
//static const float PI = 3.14159265f;

float4 TargetSize;



bool IntersectTriangle(Ray R, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v)
{
	float3 edge1 = vert1 - vert0;
	float3 edge2 = vert2 - vert0;

	float3 pvec = cross(R.Dir, edge2);
	float det = dot(edge1, pvec);

	if (det < EPSILON) {
		return false;
	}
	float invdet = 1.0f / det;

	float3 tvec = R.Orig - vert0;
	u = dot(tvec, pvec) * invdet;
	if (u < 0.0f || u > 1.0f) {
		return false;
	}
	float3 qvec = cross(tvec, edge1);
	v = dot(R.Dir, qvec) * invdet;
	if (v < 0.0f || u + v > 1.0f) {
		return false;
	}
	t = dot(edge2, qvec) * invdet;
	return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
	uint offset = meshObject.indices_offset;
	uint count = offset + meshObject.indices_count;
	for (uint i = offset; i < count; i += 3)
	{
		float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1.0f))).xyz;
		float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1.0f))).xyz;
		float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1.0f))).xyz;

		float t, u, v;
		if (IntersectTriangle(ray, v0, v1, v2, t, u, v))
		{
			if (t > 0.0f && t < bestHit.distance)
			{
				bestHit.distance = t;
				bestHit.position = ray.Orig + t * ray.Dir;
				bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
				bestHit.albedo = 0.0f;
				bestHit.specular = 0.65f;
				bestHit.smoothness = 0.99f;
				bestHit.emission = 0.0f;
			}
		}
	}
}


RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.0f; // .#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	hit.smoothness = 0.0f;
	hit.emission = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	uint count, stride, i;

	//IntersectGroundPlane(ray, bestHit);
	/*
	spheres.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
		IntersectSphere(ray, bestHit, spheres[i]);
	}
	*/
	_MeshObjects.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
		IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
	}

	return bestHit;
}




float3 Ray_Color(Ray r, SimpleAccelerationStructure sas, float2 uv)
{
	Sphere Sph;
	HitRecord Rec = _HitRecord();
	Ray R = r;
	float3 Factor = float3(1, 1, 1);
	Ray Scattered = _Ray(float3(0, 0, 0), float3(0, 0, 0));
	float3 Attenuation = float3(0, 0, 0);

	for (int i = 0; i < MAX_RAY_RECURSIVE_DEPTH; i++)
	{
		if (SimpleAccelerationStructure_Hit(sas, R, MINT, INFINITY, Rec))
		{
			float Offset = ((float)i) / (float)(MAX_RAY_RECURSIVE_DEPTH * 2);

			if (Material_Scatter(Rec.Material, R, Rec, Attenuation, Scattered, float3(uv, Offset)))
			{
				R = Scattered;
				Factor *= Attenuation;
			}
			else
			{
				return float3(0, 0, 0);
			}
		}
		else
		{
			float theta = acos(R.Dir.y) / -3.14159265f;
			float phi = atan2(R.Dir.x, -R.Dir.z) / -3.14159265f * 0.5f;
			return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * Factor;
			//return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(1.8, 0.9), 0).xyz * _SkyBoxFactor;
				
		}
			
			
			//float3 UnitDir = normalize(R.Dir);
			//float t = 0.5 * (UnitDir.y + 1.0f);
			//return lerp(BKG_COLOR0, BKG_COLOR1, t) * Factor;

			
		
	}
	return float3(0, 0, 0);
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float2 ViewportSize = float2(2.0, 2.0);
	float FocalLength = 1.0f;

	float3 Origin = float3(0, 0, 0);
	float3 Horizontal = float3(ViewportSize.x, 0, 0);
	float3 Vertical = float3(0, ViewportSize.y, 0);
	float3 LowerLeftCorner = Origin - (Horizontal / 2.0) - (Vertical / 2.0) - float3(0, 0, FocalLength);
	
	SimpleAccelerationStructure SAS = _SimpleAccelerationStructure(int(TargetSize.w), SimpleAccelerationStructureData);
	
	float3 LookFrom = float3(13, 2, 3);
	float3 LookAt = float3(0, 0, 0);
	float3 VUp = float3(0, 1, 0);
	float Dist2Focus = 10.0;
	float Aperture = 0.2;
	Camera Cam = _Camera(LookFrom, LookAt, VUp, 25, TargetSize.x / TargetSize.y, Aperture, Dist2Focus);

	float3 Color = float3(0, 0, 0);
	

	for (int s = 0; s < AA_SAMPLES; s++)
	{
		float2 Seed = float2(id.xy) / TargetSize.xy;
		float Offset = float(s) / float(AA_SAMPLES);

		float2 Jitter = float2(Random(Seed), Random(Seed + Offset));
		float2 UV = (float2(id.xy) + Jitter) / TargetSize.xy;

		
		

	    Ray R = Camera_GetRay(Cam, UV);		
		Color += Ray_Color(R, SAS, UV);
	}
	Color /= float(AA_SAMPLES);
	Color = clamp(Color, 0, 1);
	Color = pow(Color, 1.0/1.8);
	
	Result[id.xy] = float4(Color, 1);

	//Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
}
